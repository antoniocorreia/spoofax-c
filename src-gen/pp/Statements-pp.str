module src-gen/pp/Statements-pp

imports
  libstratego-gpp
  runtime/tmpl/pp
  src-gen/signatures/Statements-sig


imports
  src-gen/signatures/Declarations-sig
  src-gen/signatures/Expressions-sig
  src-gen/signatures/Lexical-sig


imports
  src-gen/pp/Declarations-pp
  src-gen/pp/Expressions-pp
  src-gen/pp/Lexical-pp


strategies
  prettyprint-example =
    prettyprint-Stm

  prettyprint-example =
    prettyprint-LabeledStm

  prettyprint-example =
    prettyprint-CompoundStm

  prettyprint-example =
    prettyprint-BlockItem

  prettyprint-example =
    prettyprint-ExpStm

  prettyprint-example =
    prettyprint-SelectionStm

  prettyprint-example =
    prettyprint-IterStm

  prettyprint-example =
    prettyprint-JmpStm

  prettyprint-Stm :
    t1__ -> [ H(
                [SOpt(HS(), "0")]
              , [t1__']
              )
            ]
    where not(is-Stm)
    where t1__' := <pp-one-Z(prettyprint-LabeledStm)> t1__

  prettyprint-Stm :
    t1__ -> [ H(
                [SOpt(HS(), "0")]
              , [t1__']
              )
            ]
    where not(is-Stm)
    where t1__' := <pp-one-Z(prettyprint-CompoundStm)> t1__

  prettyprint-Stm :
    t1__ -> [ H(
                [SOpt(HS(), "0")]
              , [t1__']
              )
            ]
    where not(is-Stm)
    where t1__' := <pp-one-Z(prettyprint-ExpStm)> t1__

  prettyprint-Stm :
    t1__ -> [ H(
                [SOpt(HS(), "0")]
              , [t1__']
              )
            ]
    where not(is-Stm)
    where t1__' := <pp-one-Z(prettyprint-SelectionStm)> t1__

  prettyprint-Stm :
    t1__ -> [ H(
                [SOpt(HS(), "0")]
              , [t1__']
              )
            ]
    where not(is-Stm)
    where t1__' := <pp-one-Z(prettyprint-IterStm)> t1__

  prettyprint-Stm :
    t1__ -> [ H(
                [SOpt(HS(), "0")]
              , [t1__']
              )
            ]
    where not(is-Stm)
    where t1__' := <pp-one-Z(prettyprint-JmpStm)> t1__

  prettyprint-LabeledStm :
    Label(t1__, t2__) -> [ H(
                             [SOpt(HS(), "0")]
                           , [t1__', S(" : "), t2__']
                           )
                         ]
    with t1__' := <pp-one-Z(prettyprint-Id)> t1__
    with t2__' := <pp-one-Z(prettyprint-Stm)> t2__

  is-LabeledStm =
    ?Label(_, _)

  prettyprint-LabeledStm :
    Case(t1__, t2__) -> [ H(
                            [SOpt(HS(), "0")]
                          , [ S("case ")
                            , t1__'
                            , S(" : ")
                            , t2__'
                            ]
                          )
                        ]
    with t1__' := <pp-one-Z(prettyprint-ConstExp)> t1__
    with t2__' := <pp-one-Z(prettyprint-Stm)> t2__

  is-LabeledStm =
    ?Case(_, _)

  prettyprint-LabeledStm :
    Default(t1__) -> [ H(
                         [SOpt(HS(), "0")]
                       , [S("default : "), t1__']
                       )
                     ]
    with t1__' := <pp-one-Z(prettyprint-Stm)> t1__

  is-LabeledStm =
    ?Default(_)

  prettyprint-CompoundStm :
    Block(t1__) -> [ H(
                       [SOpt(HS(), "0")]
                     , [S("{")]
                     )
                   , t1__'
                   , H(
                       [SOpt(HS(), "0")]
                     , [S("}")]
                     )
                   ]
    with t1__' := <pp-indent(|"2")> [<pp-V-list(prettyprint-BlockItem)> t1__]

  is-CompoundStm =
    ?Block(_)

  prettyprint-BlockItem :
    t1__ -> [ H(
                [SOpt(HS(), "0")]
              , [t1__']
              )
            ]
    where not(is-BlockItem)
    where t1__' := <pp-one-Z(prettyprint-Decl)> t1__

  prettyprint-BlockItem :
    t1__ -> [ H(
                [SOpt(HS(), "0")]
              , [t1__']
              )
            ]
    where not(is-BlockItem)
    where t1__' := <pp-one-Z(prettyprint-Stm)> t1__

  prettyprint-ExpStm :
    ExpStm(t1__) -> [ H(
                        [SOpt(HS(), "0")]
                      , [t1__', S(";")]
                      )
                    ]
    with t1__' := <pp-option(pp-one-Z(prettyprint-Exp))> t1__

  is-ExpStm =
    ?ExpStm(_)

  prettyprint-SelectionStm :
    If(t1__, t2__) -> [ H(
                          [SOpt(HS(), "0")]
                        , [ S("if(")
                          , t1__'
                          , S(") ")
                          , t2__'
                          ]
                        )
                      ]
    with t1__' := <pp-one-Z(prettyprint-Exp)> t1__
    with t2__' := <pp-one-Z(prettyprint-Stm)> t2__

  is-SelectionStm =
    ?If(_, _)

  prettyprint-SelectionStm :
    IfElse(t1__, t2__, t3__) -> [ H(
                                    [SOpt(HS(), "0")]
                                  , [ S("if(")
                                    , t1__'
                                    , S(") ")
                                    , t2__'
                                    , S(" else ")
                                    , t3__'
                                    ]
                                  )
                                ]
    with t1__' := <pp-one-Z(prettyprint-Exp)> t1__
    with t2__' := <pp-one-Z(prettyprint-Stm)> t2__
    with t3__' := <pp-one-Z(prettyprint-Stm)> t3__

  is-SelectionStm =
    ?IfElse(_, _, _)

  prettyprint-SelectionStm :
    Switch(t1__, t2__) -> [ H(
                              [SOpt(HS(), "0")]
                            , [ S("switch(")
                              , t1__'
                              , S(") ")
                              , t2__'
                              ]
                            )
                          ]
    with t1__' := <pp-one-Z(prettyprint-Exp)> t1__
    with t2__' := <pp-one-Z(prettyprint-Stm)> t2__

  is-SelectionStm =
    ?Switch(_, _)

  prettyprint-IterStm :
    While(t1__, t2__) -> [ H(
                             [SOpt(HS(), "0")]
                           , [ S("while(")
                             , t1__'
                             , S(") ")
                             , t2__'
                             ]
                           )
                         ]
    with t1__' := <pp-one-Z(prettyprint-Exp)> t1__
    with t2__' := <pp-one-Z(prettyprint-Stm)> t2__

  is-IterStm =
    ?While(_, _)

  prettyprint-IterStm :
    Do(t1__, t2__) -> [ H(
                          [SOpt(HS(), "0")]
                        , [ S("do ")
                          , t1__'
                          , S(" while(")
                          , t2__'
                          , S(")")
                          ]
                        )
                      ]
    with t1__' := <pp-one-Z(prettyprint-Stm)> t1__
    with t2__' := <pp-one-Z(prettyprint-Exp)> t2__

  is-IterStm =
    ?Do(_, _)

  prettyprint-IterStm :
    For(t1__, t2__, t3__, t4__) -> [ H(
                                       [SOpt(HS(), "0")]
                                     , [ S("for(")
                                       , t1__'
                                       , S("; ")
                                       , t2__'
                                       , S("; ")
                                       , t3__'
                                       , S(") ")
                                       , t4__'
                                       ]
                                     )
                                   ]
    with t1__' := <pp-option(pp-one-Z(prettyprint-Exp))> t1__
    with t2__' := <pp-option(pp-one-Z(prettyprint-Exp))> t2__
    with t3__' := <pp-option(pp-one-Z(prettyprint-Exp))> t3__
    with t4__' := <pp-one-Z(prettyprint-Stm)> t4__

  is-IterStm =
    ?For(_, _, _, _)

  prettyprint-IterStm :
    DeclFor(t1__, t2__, t3__, t4__) -> [ H(
                                           [SOpt(HS(), "0")]
                                         , [ S("for(")
                                           , t1__'
                                           , S(" ")
                                           , t2__'
                                           , S("; ")
                                           , t3__'
                                           , S(") ")
                                           , t4__'
                                           ]
                                         )
                                       ]
    with t1__' := <pp-one-Z(prettyprint-Decl)> t1__
    with t2__' := <pp-option(pp-one-Z(prettyprint-Exp))> t2__
    with t3__' := <pp-option(pp-one-Z(prettyprint-Exp))> t3__
    with t4__' := <pp-one-Z(prettyprint-Stm)> t4__

  is-IterStm =
    ?DeclFor(_, _, _, _)

  prettyprint-JmpStm :
    Goto(t1__) -> [ H(
                      [SOpt(HS(), "0")]
                    , [ S("goto ")
                      , t1__'
                      , S(";")
                      ]
                    )
                  ]
    with t1__' := <pp-one-Z(prettyprint-Id)> t1__

  is-JmpStm =
    ?Goto(_)

  prettyprint-JmpStm :
    Continue() -> [ H(
                      [SOpt(HS(), "0")]
                    , [S("continue;")]
                    )
                  ]

  is-JmpStm =
    ?Continue()

  prettyprint-JmpStm :
    Break() -> [ H(
                   [SOpt(HS(), "0")]
                 , [S("break;")]
                 )
               ]

  is-JmpStm =
    ?Break()

  prettyprint-JmpStm :
    Return(t1__) -> [ H(
                        [SOpt(HS(), "0")]
                      , [ S("return ")
                        , t1__'
                        , S(";")
                        ]
                      )
                    ]
    with t1__' := <pp-option(pp-one-Z(prettyprint-Exp))> t1__

  is-JmpStm =
    ?Return(_)

  is-Stm =
    fail

  is-LabeledStm =
    fail

  is-CompoundStm =
    fail

  is-BlockItem =
    fail

  is-ExpStm =
    fail

  is-SelectionStm =
    fail

  is-IterStm =
    fail

  is-JmpStm =
    fail