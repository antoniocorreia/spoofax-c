[
   Label                               -- _1 KW[":"] _2,
   Case                                -- KW["case"] _1 KW[":"] _2,
   Default                             -- KW["default"] KW[":"] _1,
   Block                               -- V  [V vs=2 [KW["{"] _1] KW["}"]],
   Block.1:iter-star                   -- _1,
   ExpStm                              -- _1 KW[";"],
   ExpStm.1:opt                        -- _1,
   If                                  -- KW["if"] KW["("] _1 KW[")"] _2,
   IfElse                              -- KW["if"] KW["("] _1 KW[")"] _2 KW["else"] _3,
   Switch                              -- KW["switch"] KW["("] _1 KW[")"] _2,
   While                               -- KW["while"] KW["("] _1 KW[")"] _2,
   Do                                  -- KW["do"] _1 KW["while"] KW["("] _2 KW[")"],
   For                                 -- KW["for"] KW["("] _1 KW[";"] _2 KW[";"] _3 KW[")"] _4,
   For.1:opt                           -- _1,
   For.2:opt                           -- _1,
   For.3:opt                           -- _1,
   DeclFor                             -- KW["for"] KW["("] _1 _2 KW[";"] _3 KW[")"] _4,
   DeclFor.2:opt                       -- _1,
   DeclFor.3:opt                       -- _1,
   Goto                                -- KW["goto"] _1 KW[";"],
   Continue                            -- KW["continue;"],
   Break                               -- KW["break;"],
   Return                              -- KW["return"] _1 KW[";"],
   Return.1:opt                        -- _1,
   COMPLETION-Stm                      -- _1,
   COMPLETION-LabeledStm               -- _1,
   COMPLETION-CompoundStm              -- _1,
   COMPLETION-BlockItem                -- _1,
   COMPLETION-ExpStm                   -- _1,
   COMPLETION-SelectionStm             -- _1,
   COMPLETION-IterStm                  -- _1,
   COMPLETION-JmpStm                   -- _1,
   PP                                  -- _1,
   PP                                  -- _1,
   PP                                  -- _1,
   COMPLETION-ExternalDecl             -- _1,
   COMPLETION-StructDecl               -- _1,
   COMPLETION-Stm                      -- _1,
   CharConst                           -- _1,
   IntConst                            -- _1,
   OctConst                            -- _1,
   HexConst                            -- _1,
   FloatConst                          -- _1,
   StringConst                         -- _1,
   COMPLETION-Constant                 -- _1,
   TranslationUnit                     -- KW["ExternalDecl+;"] KW["{\"\\n\"}"],
   FuncDef                             -- _1 _2 _3 _4,
   FuncDef.1:iter-star                 -- _1,
   FuncDef.3:iter-star                 -- _1,
   COMPLETION-TranslationUnit          -- _1,
   COMPLETION-ExternalDecl             -- _1,
   COMPLETION-FuncDef                  -- _1,
   DeclRef                             -- _1,
   GenSelect                           -- KW["_Generic"] KW["("] _1 KW[","] _2 KW[")"],
   GenSelect.2:iter-sep                -- _1 KW[","],
   GenTypeAssoc                        -- _1 KW[":"] _2,
   GenDefaultAssoc                     -- KW["default"] KW[":"] _1,
   ArrayAccess                         -- _1 KW["["] _2 KW["]"],
   Call                                -- _1 KW["("] _2 KW[")"],
   Call.2:iter-star-sep                -- _1 KW[","],
   Access                              -- _1 KW["."] _2,
   DerefAccess                         -- _1 KW["->"] _2,
   PostInc                             -- _1 KW["++"],
   PostDec                             -- _1 KW["--"],
   PreInc                              -- KW["++"] _1,
   PreDec                              -- KW["--"] _1,
   UnaryOp                             -- _1 _2,
   ExpSizeof                           -- KW["sizeof"] _1,
   TypeSizeof                          -- KW["sizeof"] KW["("] _1 KW[")"],
   Alignof                             -- KW["_Alignof"] KW["("] _1 KW[")"],
   Ref                                 -- KW["&"],
   Deref                               -- KW["*"],
   Pos                                 -- KW["+"],
   Neg                                 -- KW["-"],
   BNot                                -- KW["~"],
   LNot                                -- KW["!"],
   COMPLETION-PrimExp                  -- _1,
   COMPLETION-GenSelect                -- _1,
   COMPLETION-GenAssoc                 -- _1,
   COMPLETION-PostfixExp               -- _1,
   COMPLETION-UnaryExp                 -- _1,
   COMPLETION-UnaryOp                  -- _1,
   Cast                                -- KW["("] _1 KW[")"] _2,
   BinOp                               -- _1 _2 _3,
   Mul                                 -- KW["*"],
   Div                                 -- KW["/"],
   Mod                                 -- KW["%"],
   BinOp                               -- _1 _2 _3,
   Add                                 -- KW["+"],
   Sub                                 -- KW["-"],
   BinOp                               -- _1 _2 _3,
   LShift                              -- KW["<<"],
   RShift                              -- KW[">>"],
   BinOp                               -- _1 _2 _3,
   Lt                                  -- KW["<"],
   Gt                                  -- KW[">"],
   Lte                                 -- KW["<="],
   Gte                                 -- KW[">="],
   BinOp                               -- _1 _2 _3,
   Eq                                  -- KW["=="],
   Neq                                 -- KW["!="],
   BinOp                               -- _1 _2 _3,
   BAnd                                -- KW["&"],
   BinOp                               -- _1 _2 _3,
   BXor                                -- KW["^"],
   BinOp                               -- _1 _2 _3,
   BOr                                 -- KW["|"],
   BinOp                               -- _1 _2 _3,
   LAnd                                -- KW["&&"],
   COMPLETION-CastExp                  -- _1,
   COMPLETION-MulExp                   -- _1,
   COMPLETION-MulOp                    -- _1,
   COMPLETION-AddExp                   -- _1,
   COMPLETION-AddOp                    -- _1,
   COMPLETION-ShiftExp                 -- _1,
   COMPLETION-ShiftOp                  -- _1,
   COMPLETION-RelExp                   -- _1,
   COMPLETION-RelOp                    -- _1,
   COMPLETION-EqExp                    -- _1,
   COMPLETION-EqOp                     -- _1,
   COMPLETION-BAndExp                  -- _1,
   COMPLETION-BAndOp                   -- _1,
   COMPLETION-BXorExp                  -- _1,
   COMPLETION-BXorOp                   -- _1,
   COMPLETION-BOrExp                   -- _1,
   COMPLETION-BOrOp                    -- _1,
   COMPLETION-LAndExp                  -- _1,
   COMPLETION-LAndOp                   -- _1,
   BinOp                               -- _1 _2 _3,
   LOr                                 -- KW["||"],
   COMPLETION-LOrExp                   -- _1,
   COMPLETION-LOrOp                    -- _1,
   IfExp                               -- _1 KW["?"] _2 KW[":"] _3,
   AssignExp                           -- _1 _2 _3,
   Eq                                  -- KW["="],
   Mul                                 -- KW["*="],
   Div                                 -- KW["/="],
   Mod                                 -- KW["%="],
   Add                                 -- KW["+="],
   Sub                                 -- KW["-="],
   LShift                              -- KW["<<="],
   RShift                              -- KW[">>="],
   BAnd                                -- KW["&="],
   BXor                                -- KW["^="],
   BOr                                 -- KW["|="],
   Comma                               -- _1 KW[","] _2,
   COMPLETION-CondExp                  -- _1,
   COMPLETION-AssignExp                -- _1,
   COMPLETION-AssignOp                 -- _1,
   COMPLETION-Exp                      -- _1,
   COMPLETION-ConstExp                 -- _1,
   Decl                                -- _1 _2 KW[";"],
   Decl.2:iter-sep                     -- _1 KW[","],
   Decl                                -- _1 _2 KW[";"],
   Decl.2:iter-star-sep                -- _1 KW[","],
   Init                                -- _1 KW["="] _2,
   Typedef                             -- KW["typedef"],
   Extern                              -- KW["extern"],
   Static                              -- KW["static"],
   ThreadLocal                         -- KW["_Thead_local"],
   Auto                                -- KW["auto"],
   Register                            -- KW["register"],
   Void                                -- KW["void"],
   Char                                -- KW["char"],
   Short                               -- KW["short"],
   Int                                 -- KW["int"],
   Long                                -- KW["long"],
   Float                               -- KW["float"],
   Double                              -- KW["double"],
   Signed                              -- KW["signed"],
   Unsigned                            -- KW["unsigned"],
   Bool                                -- KW["_Bool"],
   Complex                             -- KW["_Complex"],
   DeclRef                             -- _1,
   StructSpec                          -- KW["struct"] _1 KW["{"] _2 KW["}"],
   StructSpec.1:opt                    -- _1,
   StructSpec.2:iter                   -- _1,
   StructSpec                          -- KW["struct"] _1,
   UnionSpec                           -- KW["union"] _1 KW["{"] _2 KW["}"],
   UnionSpec.1:opt                     -- _1,
   UnionSpec.2:iter                    -- _1,
   UnionSpec                           -- KW["union"] _1,
   FieldDecl                           -- _1 _2 KW[";"],
   FieldDecl.1:iter                    -- _1,
   FieldDecl.2:iter-sep                -- _1 KW[","],
   FieldDecl                           -- _1 _2 KW[";"],
   FieldDecl.1:iter                    -- _1,
   FieldDecl.2:iter-star-sep           -- _1 KW[","],
   Bitfield                            -- _1 KW[":"] _2,
   Bitfield                            -- KW[":"] _1,
   EnumSpec                            -- KW["enum"] _1 KW["{"] _2 _3 KW["}"],
   EnumSpec.1:opt                      -- _1,
   EnumSpec.2:iter-sep                 -- _1 KW[","],
   EnumSpec.3:opt                      -- _1,
   EnumSpec                            -- KW["enum"] _1,
   EnumConst                           -- _1,
   EnumConst                           -- _1 KW["="] _2,
   Atomic                              -- KW["_Atomic"] KW["("] _1 KW[")"],
   Const                               -- KW["const"],
   Restrict                            -- KW["restrict"],
   Volatile                            -- KW["volatile"],
   Atomic                              -- KW["_Atomic"],
   Inline                              -- KW["inline"],
   NoReturn                            -- KW["_Noreturn"],
   Alignas                             -- KW["_Alignas"] KW["("] _1 KW[")"],
   Alignas                             -- KW["_Alignas"] KW["("] _1 KW[")"],
   Declarator                          -- _1 _2,
   Declarator.1:opt                    -- _1,
   ArrayDeclarator                     -- _1 KW["["] _2 _3 KW["]"],
   ArrayDeclarator.2:iter-star         -- _1,
   ArrayDeclarator.3:opt               -- _1,
   ArrayDeclarator                     -- _1 KW["[static"] _2 _3 KW["]"],
   ArrayDeclarator.2:iter-star         -- _1,
   ArrayDeclarator                     -- _1 KW["["] _2 KW["static"] _3 KW["]"],
   ArrayDeclarator.2:iter              -- _1,
   ArrayDeclarator                     -- _1 KW["["] _2 KW["*]"],
   ArrayDeclarator.2:iter              -- _1,
   Declarator                          -- _1 _2,
   Declarator.1:opt                    -- _1,
   FuncDeclarator                      -- _1 KW["("] _2 KW[")"],
   FuncDeclarator                      -- _1 KW["("] _2 KW[")"],
   Ptr                                 -- V  [H  [KW["*"]] _1],
   Ptr.1:iter-star                     -- _1,
   Ptr                                 -- V  [V vs=2 [KW["*"] _1] _2],
   Ptr.1:iter-star                     -- _1,
   ParamTypeList                       -- _1,
   ParamTypeList.1:iter-star-sep       -- _1 KW[","],
   ParamTypeVararg                     -- _1 KW[","] KW["..."],
   ParamTypeVararg.1:iter-sep          -- _1 KW[","],
   ParamList                           -- _1,
   ParamList.1:iter-sep                -- _1 KW[","],
   ParamDecl                           -- _1 _2,
   ParamDecl.2:opt                     -- _1,
   ParamDecl                           -- _1 _2,
   TypeName                            -- _1 _2,
   TypeName.1:iter                     -- _1,
   TypeName.2:opt                      -- _1,
   ADeclarator                         -- _1,
   ADeclarator                         -- _1 _2,
   ADeclarator.1:opt                   -- _1,
   ArrayADeclarator                    -- _1 KW["["] _2 _3 KW["]"],
   ArrayADeclarator.1:opt              -- _1,
   ArrayADeclarator.2:iter-star        -- _1,
   ArrayADeclarator.3:opt              -- _1,
   ArrayADeclarator                    -- _1 KW["[static"] _2 _3 KW["]"],
   ArrayADeclarator.1:opt              -- _1,
   ArrayADeclarator.2:iter-star        -- _1,
   ArrayADeclarator                    -- _1 KW["["] _2 KW["static"] _3 KW["]"],
   ArrayADeclarator.1:opt              -- _1,
   ArrayADeclarator.2:iter             -- _1,
   ArrayADeclarator                    -- _1 KW["[*]"],
   ArrayADeclarator.1:opt              -- _1,
   FuncADeclarator                     -- _1 KW["("] _2 KW[")"],
   FuncADeclarator.1:opt               -- _1,
   Initializer                         -- KW["{"] _1 _2 KW["}"],
   Initializer.1:iter-sep              -- _1 KW[","],
   Initializer.2:opt                   -- _1,
   DesignationInit                     -- _1 _2,
   Designation                         -- _1 KW["="],
   Designation.1:iter                  -- _1,
   Designator                          -- KW["["] _1 KW["]"],
   Designator                          -- KW["."] _1,
   StaticAssertDecl                    -- KW["_Static_assert"] KW["("] _1 KW[","] _2 KW[")"] KW[";"],
   COMPLETION-Decl                     -- _1,
   COMPLETION-DeclSpec                 -- _1,
   COMPLETION-DeclSpecs                -- _1,
   COMPLETION-InitDeclarator           -- _1,
   COMPLETION-StoreClassSpec           -- _1,
   COMPLETION-TypeSpec                 -- _1,
   COMPLETION-StructOrUnionSpec        -- _1,
   COMPLETION-StructDecl               -- _1,
   COMPLETION-SpecifierQualifier       -- _1,
   COMPLETION-StructDeclarator         -- _1,
   COMPLETION-StructBitfieldDeclarator -- _1,
   COMPLETION-EnumSpec                 -- _1,
   COMPLETION-Enumerator               -- _1,
   COMPLETION-AtomicTypeSpec           -- _1,
   COMPLETION-TypeQualifier            -- _1,
   COMPLETION-FuncSpec                 -- _1,
   COMPLETION-AlignSpec                -- _1,
   COMPLETION-Declarator               -- _1,
   COMPLETION-DirectDeclarator         -- _1,
   COMPLETION-FuncDeclarator           -- _1,
   COMPLETION-DirectFuncDeclarator     -- _1,
   COMPLETION-Ptr                      -- _1,
   COMPLETION-ParamTypeList            -- _1,
   COMPLETION-ParamList                -- _1,
   COMPLETION-ParamDecl                -- _1,
   COMPLETION-TypeName                 -- _1,
   COMPLETION-AbstractDeclarator       -- _1,
   COMPLETION-DirectAbstractDeclarator -- _1,
   COMPLETION-Initializer              -- _1,
   COMPLETION-DesignationInit          -- _1,
   COMPLETION-Designation              -- _1,
   COMPLETION-Designator               -- _1,
   COMPLETION-StaticAssertDecl         -- _1
]